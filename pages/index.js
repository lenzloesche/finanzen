import Head from "next/head";
import { useEffect, useState } from "react";
import dynamic from "next/dynamic";

const MyPieChart = dynamic(() => import("@/components/charts/piechart"), {
  ssr: false,
});

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

export default function Home({ data, setData }) {
  const [currentYear, setCurrentYear] = useState(2023);
  const [currentMonth, setCurrentMonth] = useState(0);
  const [currentData, setCurrentData] = useState([]);

  function handleSubmit(event) {
    event.preventDefault();
    const newData = [
      {
        name: "Groceries",
        value: parseInt(event.target.elements.groceries.value),
        color: "grey",
      },
      {
        name: "House",
        value: parseInt(event.target.elements.house.value),
        color: "blue",
      },
      {
        name: "Fun",
        value: parseInt(event.target.elements.fun.value),
        color: "red",
      },
      {
        name: "Children",
        color: "green",
        value: parseInt(event.target.elements.children.value),
      },
      {
        name: "Savings",
        color: "violet",
        value: parseInt(event.target.elements.savings.value),
      },
    ];
    let newFullData = { ...data };
    newFullData = createYearAndMonth(newFullData, currentYear, currentMonth);
    newFullData[currentYear][currentMonth] = newData;
    setData(newFullData);
    setCurrentData(newData);
  }

  function switchDates(switchToYear, switchToMonth) {
    let newFullData = { ...data };
    newFullData = createYearAndMonth(newFullData, switchToYear, switchToMonth);
    const newData = newFullData[switchToYear][switchToMonth];
    setData(newFullData);
    setCurrentData(newData);
  }

  function createYearAndMonth(newFullData, yearToCreate, monthToCreate) {
    if (!newFullData[yearToCreate]) {
      newFullData[yearToCreate] = {};
    }
    if (!newFullData[yearToCreate][monthToCreate]) {
      newFullData[yearToCreate][monthToCreate] = [];
    }
    return newFullData;
  }

  function handleMinusYear() {
    setCurrentYear(currentYear - 1);
    switchDates(currentYear - 1, currentMonth);
  }
  function handlePlusYear() {
    setCurrentYear(currentYear + 1);
    switchDates(currentYear + 1, currentMonth);
  }
  function handleMinusMonth() {
    if (currentMonth === 0) {
      setCurrentMonth(11);
      setCurrentYear(currentYear - 1);
      switchDates(currentYear - 1, 11);
    } else {
      setCurrentMonth(currentMonth - 1);
      switchDates(currentYear, currentMonth - 1);
    }
  }
  function handlePlusMonth() {
    if (currentMonth === 11) {
      setCurrentMonth(0);
      setCurrentYear(currentYear + 1);
      switchDates(currentYear + 1, 0);
    } else {
      setCurrentMonth(currentMonth + 1);
      switchDates(currentYear, currentMonth + 1);
    }
  }

  return (
    <>
      <Head>
        <title>Finanzen</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>INSIGHT</h1>
        <button onClick={handleMinusYear}>-</button> <h2>{currentYear}</h2>{" "}
        <button onClick={handlePlusYear}>+</button>
        <br />
        <button onClick={handleMinusMonth}>-</button>{" "}
        <h3>{months[currentMonth]}</h3>{" "}
        <button onClick={handlePlusMonth}>+</button>
        <form
          onSubmit={(event) => {
            handleSubmit(event);
          }}
        >
          <label htmlFor="house">
            House:
            <input id="house" type="text"></input>
          </label>
          <br />
          <label htmlFor="groceries">
            Groceries:
            <input id="groceries" type="text"></input>
          </label>
          <br />
          <label htmlFor="fun">
            Fun:
            <input id="fun" type="text"></input>
          </label>
          <br />
          <label htmlFor="children">
            Children:
            <input id="children" type="text"></input>
          </label>
          <br />
          <label htmlFor="savings">
            Savings:
            <input id="savings" type="text"></input>
          </label>
          <br />
          <button>Save</button>
        </form>
        <MyPieChart data={currentData}></MyPieChart>;
      </main>
    </>
  );
}
